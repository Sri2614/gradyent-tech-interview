name: Deploy to EKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: gradyent-eks-cluster
  NAMESPACE: production

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Lint Helm Chart
      run: |
        helm lint .
        helm template . --values values.yaml

    - name: Test Helm Chart
      run: |
        helm template . --values values.yaml > /tmp/rendered.yaml
        echo "Chart rendered successfully"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to Staging
      run: |
        helm upgrade --install tech-interview-staging . \
          --namespace staging \
          --create-namespace \
          --set ingress.host=staging-tech-interview-gradyent.cloudsslcert.com \
          --set replicaCount=1 \
          --set autoscaling.enabled=false \
          --wait

    - name: Run Health Checks
      run: |
        kubectl wait --for=condition=ready pod -l app=tech-interview-staging -n staging --timeout=300s
        kubectl get pods -n staging
        kubectl get svc -n staging
        kubectl get ingress -n staging

  deploy-production:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to Production
      run: |
        helm upgrade --install tech-interview . \
          --namespace production \
          --create-namespace \
          --wait

    - name: Run Health Checks
      run: |
        kubectl wait --for=condition=ready pod -l app=tech-interview -n production --timeout=300s
        kubectl get pods -n production
        kubectl get svc -n production
        kubectl get ingress -n production
        kubectl get hpa -n production

    - name: Test Application Endpoints
      run: |
        # Test readiness probe
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://tech-interview-service.production.svc.cluster.local:8080/ || echo "Readiness probe test failed"
        
        # Test liveness probe
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://tech-interview-service.production.svc.cluster.local:8080/hello || echo "Liveness probe test failed"

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify Deployment Status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
